#!/usr/bin/env bash
# shellcheck disable=SC1117,SC2034,SC2154

########################################################################################

if [[ -n "${SCRIPT_DEBUG}" ]] ; then
  set -x
fi

########################################################################################

APP="RDS Tools"
VER="2.0.0"

########################################################################################

NORM=0
BOLD=1
UNLN=4
RED=31
GREEN=32
YELLOW=33
BLUE=34
MAG=35
CYAN=36
GREY=37
DARK=90

CL_NORM="\e[0m"
CL_BOLD="\e[0;${BOLD};49m"
CL_UNLN="\e[0;${UNLN};49m"
CL_RED="\e[0;${RED};49m"
CL_GREEN="\e[0;${GREEN};49m"
CL_YELLOW="\e[0;${YELLOW};49m"
CL_BLUE="\e[0;${BLUE};49m"
CL_MAG="\e[0;${MAG};49m"
CL_CYAN="\e[0;${CYAN};49m"
CL_GREY="\e[0;${GREY};49m"
CL_DARK="\e[0;${DARK};49m"
CL_BL_RED="\e[1;${RED};49m"
CL_BL_GREEN="\e[1;${GREEN};49m"
CL_BL_YELLOW="\e[1;${YELLOW};49m"
CL_BL_BLUE="\e[1;${BLUE};49m"
CL_BL_MAG="\e[1;${MAG};49m"
CL_BL_CYAN="\e[1;${CYAN};49m"
CL_BL_GREY="\e[1;${GREY};49m"

########################################################################################

# Path to Redis-Split configuration file
RDS_CONFIG="/etc/redis-split.knf"

########################################################################################

# Main func
#
# *: All arguments passed to utility
#
# Code: No
# Echo: No
main() {
  if [[ "$1" == "-h" || "$1" == "--help" || $# -eq 0 ]] ; then
    usage
    exit 0
  fi

  if [[ "$1" == "--version" || "$1" == "-v" ]] ; then
    about
    exit 0
  fi

  if ! isAppInstalled "knf" ; then
    error "This app requires knf utility"
    exit 0
  fi

  runCommand "$@"
}

# Runs command
#
# *: All arguments passed to utility
#
# Code: No
# Echo: No
runCommand() {
  local cmd="$1"

  shift

  case $cmd in
    "wipe")  wipeData "$@" ;;
    "fill")  fillInstance "$@" ;;
    *)       error "Unknown command $1" ; exit 1 ;;
  esac
}

# Remove all Redis-Split data
#
# Code: No
# Echo: No
wipeData() {
  local dir

  dir=$(getRDSDir)

  if [[ -z "$dir" ]] ; then
    error "Can't find Redis-Split main directory"
    exit 1
  fi

  show "Wiping data in $dir…"

  stopSyncDaemon
  killSentinel
  killAllInstances
  wipeAllData "$dir"

  show "All data successfully removed!" $GREEN
}

# Fills instance with random data
#
# 1: ID (Number)
# 2: Size (String) [Optional]
# 3: Number of objects (Number) [Optional]
#
# Code: No
# Echo: No
fillInstance() {
  local id="$1"
  local size="${2:-1mb}"
  local num=${3:-100}

  local raw_size prefix tmp_file port

  port=$(getInstancePort "$id")

  if [[ -z "$port" || $port -lt 1000 ]] ; then
    error "Can't find instance port"
    exit 1
  fi

  raw_size=$(parseSize "$size")
  prefix=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 12)
  tmp_file=$(mktemp)

  show "Generating random data…"

  tr -dc A-Za-z0-9 </dev/urandom | head -c "$raw_size" > "$tmp_file"

  show "Filling ${CL_BL_RED}Redis${CL_NORM} on $port ${CL_GREY}($size ✕ $num)${CL_NORM}…"

  for i in $(seq 0 "$num") ; do
    redis-cli -x -p "$port" SET "${prefix}_${i}" < "$tmp_file" &>/dev/null
  done

  show "Complete!" $GREEN

  rm -f "$tmp_file"
}

# Returns path to Redis-Split main directory
#
# Code: No
# Echo: Path (String)
getRDSDir() {
  local dir

  dir=$(knf $RDS_CONFIG "main:dir")

  if [[ -d "$dir" ]] ; then
    echo "$dir"
  fi
}

# Returns Redis port of given instance
#
# 1: Instance ID (Number)
#
# Code: No
# Echo: Port (Number)
getInstancePort() {
  local id="$1"

  local start_port port

  start_port=$(knf $RDS_CONFIG "redis:start-port")
  port=$(( start_port + id ))

  echo "$port"
}

########################################################################################

# Stops Redis-Split Syncing daemon
#
# Code: No
# Echo: No
stopSyncDaemon() {
  service rds-sync stop &> /dev/null
}

# Kills sentinel instance
#
# Code: No
# Echo: No
killSentinel() {
  local pid

  for pid in $(pgrep redis-sentinel) ; do
    kill -9 "$pid"
  done
}

# Kills all Redis instances
#
# Code: No
# Echo: No
killAllInstances() {
  local pid

  for pid in $(pgrep redis-server) ; do
    kill -9 "$pid"
  done
}

# Deletes all Redis-Split data
#
# 1: Redis-Split main dir (String)
#
# Code: No
# Echo: No
wipeAllData() {
  rm -rf "$1"/meta/*
  rm -rf "$1"/conf/*
  rm -rf "$1"/pid/*
  rm -rf "$1"/data/*

  find "$1/log" -mindepth 1 -type d -exec rm -rf "{}" \; &>/dev/null

  [[ -e "$1/log/sentinel.log" ]] && echo -n > "$1/log/sentinel.log"
  [[ -e "$1/log/redis-split.log" ]] && echo -n > "$1/log/redis-split.log"
  [[ -e "$1/log/redis-split-sync.log" ]] && echo -n > "$1/log/redis-split-sync.log"
}

# Parses size
#
# 1: Size (String)
#
# Code: No
# Echo: Size in bytes (Number)
parseSize() {
  local size="$1"
  local mlt

  size="${size// /}"
  size=$(echo "$size" | tr "[:upper:]" "[:lower:]")

  if [[ "$size" =~ "kb" ]] ; then
    mlt=1024
  elif [[ "$size" =~ "mb" ]] ; then
    mlt=1048576
  elif [[ "$size" =~ "gb" ]] ; then
    mlt=1073741824
  fi

  size="${size//kb/}"
  size="${size//mb/}"
  size="${size//gb/}"

  size=$(( size * mlt ))

  echo "$size"
}

# Checks if app (binary) is installed
#
# 1: Binary name (String)
#
# Code: Yes
# Echo: No
isAppInstalled() {
  if ! type -P "$1" &>/dev/null ; then
    return 1
  fi

  return 0
}

########################################################################################

# Show message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" ]] ; then
    echo -e "\e[${2}m${1}\e[0m"
  else
    echo -e "$*"
  fi
}

# Print error message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
error() {
  show "$@" $RED 1>&2
}

# Print usage info
#
# Code: No
# Echo: No
usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} rds-tools ${CL_YELLOW}{command}${CL_NORM} arguments…"
  show ""
  show "Commands" $BOLD
  show ""
  show "  ${CL_YELLOW}wipe${CL_NORM}              Kills all instances and wipes all data"
  show "  ${CL_YELLOW}fill${CL_NORM} id ${CL_DARK}size num${CL_NORM}  Fills Redis instance with random data"
  show ""
  show "Examples" $BOLD
  show ""
  show "  rds-tools wipe"
  show "  Stop sync daemon, kill all instances and delete all data" $DARK
  show ""
  show "  rds-tools 1 10mb 100"
  show "  Create 100 keys with 10mb of data on instance with ID 1" $DARK
  show ""
}

# Show info about version
#
# Code: No
# Echo: No
about() {
  show ""
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - Simple utility for debugging and testing Redis-Split"
  show ""
  show "Copyright (C) 2009-$(date +%Y) ESSENTIAL KAOS" $DARK
  show "Apache License, Version 2.0 <https://www.apache.org/licenses/LICENSE-2.0>" $DARK
  show ""
}

########################################################################################

main "$@"
